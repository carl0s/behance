<?php
/*
 * Author: Carlo "carl0s" Frinolli
 * Company: nois3lab
 * This code is fully released under GPL v2 as per license.txt
 */

require_once('lib/Be/Api.php');

function behance_menu(){
  $items = array();

  $items['admin/config/behance'] = array(
      'title'            => 'Behance API settings',
      'description'      => 'Behance API settings page for APP ID and API key',
      'position'         => 'right',
      'weight'           => -100,
      'page callback'    => 'system_admin_menu_block_page',
      'access arguments' => array('administer site configuration'),
      'file'             => 'system.admin.inc',
      'file path'        => drupal_get_path('module', 'system'),
    );

  $items['admin/config/behance/settings'] = array(
    'title'            => 'Behance API settings',
    'description'      => 'Behance API settings page for APP ID and API key',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('behance_admin'),
    'access arguments' => array('administer behance settings'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

function behance_admin($settings = NULL){

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'behance_app_id'  => variable_get('behance_app_id',''),
    'behance_api_key' => variable_get('behance_api_key',''),
  );

  $form = array();

  $form['behance_app_id'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Behance APP ID'),
    '#description'   => t('Insert your Behance APP ID, you can get one here http://www.behance.net/dev'),
    '#default_value' => variable_get('behance_app_id',''),
    '#required'      => TRUE,
  );

  $form['behance_api_key'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Behance API key'),
    '#description'   => t('Please insert your Behance API key for your app'),
    '#default_value' => variable_get('behance_api_key',''),
    '#required'      => TRUE,
  );

  return system_settings_form($form);
}

/**
* Create a taxonomy term and return the tid.
*/
function custom_create_taxonomy_term($name, $vid) {
  $term = new stdClass();
  $term->name = $name;
  $term->vid = $vid;
  taxonomy_term_save($term);
  return $term->tid;
}

function behance_node_presave($node) {
  // filefield_sources_save_file()
  // var_dump($node);
  // die();
  // DEFINING PHP VARIABLES FROM DRUPAL VARIABLES
  $behance_app_id  = variable_get('behance_app_id','');
  $behance_api_key = variable_get('behance_api_key','');

  // API CALL TO BEHANCE ACCORDING TO DOCS
  $be_api = new Be_Api($behance_app_id, $behance_api_key );
  $be_api_projects = $be_api->getUserProjects($node->title);
  foreach($be_api_projects as $single_project):
    if($node->type == 'behance' && ($node->is_new == true || $node->timestamp < $single_project->modified_on)) {

      // CHECKING ERRORS
      if(empty($behance_app_id) || empty($behance_api_key)) {
        drupal_set_message(t('Your APP ID or your API key for Behance is empty.'), 'error');
        return;
      }

      if(empty($be_api_projects)) {
        drupal_set_message(t('Something is wrong with API calls, verify your credential or your API call limit.'), 'error');
        return;
      }

      // FROM STACKEXCHANGE SAVING IMAGES
      foreach ($be_api_projects as $project) {
        $node = new stdClass;
        $node->type = 'behance_project';
        $node->title = $project->name;
        $node->status= 0;
        $node->uid = 1;
        $node->name = 'admin';
        $node->language = 'und';
        $node->field_behance_id[LANGUAGE_NONE][0]['value'] = $project->id;
        //$node->field_creative_fields[LANGUAGE_NONE][]['value'] = $project->fields;
        //die(var_dump($project->fields));
        $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'creative_fields'")->fetchField();
        foreach ($project->fields as $field) {
          $tid = custom_create_taxonomy_term($field, $vid);
          $node->field_creative_fields['und'][0] = array('tid' => $tid);
        }
        // PER PROJECT INFO TO BE UPDATED
        $be_api_single_project = $be_api->getProject($project->id);
        $node->body['und'][0]['value'] = $be_api_single_project->description;

        foreach($be_api_single_project->modules as $module):
          switch ($module->type) {
            case 'image':
              $node->field_modules[LANGUAGE_NONE][]['value'] = $module->src;
            break;
            case 'embed':
              $node->field_modules[LANGUAGE_NONE][]['value'] = $module->embed;
            break;
            case 'text':
              $node->field_modules[LANGUAGE_NONE][]['value'] = $module->text;
            break;
            default:
              $node->field_modules[LANGUAGE_NONE][]['value'] = $module->src;
            break;
          }
        endforeach;
        // END OF PER PROJECT SECTION
        $node->field_url[LANGUAGE_NONE][0]['value'] = $project->url;
        $node->field_views[LANGUAGE_NONE][]['value'] = $project->stats->views;
        foreach($project->covers as $covers):
          $node->field_covers[LANGUAGE_NONE][]['value'] = $covers;
        endforeach;
        $node->field_appreciation[LANGUAGE_NONE][]['value'] = $project->stats->appreciations;
        node_save($node);
      }
    }
  endforeach;

}

